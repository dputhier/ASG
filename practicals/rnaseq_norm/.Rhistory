library(DESeq)
library(NOISeq)
data(Marioni)
head(mycounts)
computeMA <- function(m){
kidney.pos <- grep("Kidney", colnames(m))
liver.pos  <- grep("Liver", colnames(m))
m <- log2(m+1)
M <- m[,kidney.pos] - m[,liver.pos]
A <- (m[,kidney.pos] + m[,liver.pos])/2
return(list(M=M,A=A))
}
drawMA <- function(A,M, title=NULL){
X11()
par(mfrow=c(2,3), mar=c(rep(3,4)))
for(i in 1:ncol(M)){
plot(A[,i],
M[,i],
pch=16,
col="gray",
main=paste(title, " sample ", i)
)
lines(lowess(M[,i]~A[,i]),
col="red",
lwd=2
)
grid(col="black")
abline(h=0)
}
}
drawHist <- function(M, title=NULL){
X11()
par(mfrow=c(2,3))
br <- seq(from=min(M),
to=max(M),
length.out=100
)
for(i in 1:ncol(M)){
hist(M[,i],
col="blue",
border="white",
breaks=br,
main=paste(title, " sample ", i)
)
grid(col="black")
abline(h=0)
}
}
MA.raw <- computeMA(mycounts)
drawMA(A=MA.raw$A,
M=MA.raw$M,
title="Raw Data"
)
drawHist(M=MA.raw$M,
title="Raw Data")
## Quantile normalization
mycounts.quant <- normalizeQuantiles(mycounts)
MA.quant <- computeMA(mycounts.quant)
## Library size
mycounts.col.sum <- apply(mycounts,2, sum)
mycounts.ls <- sweep(mycounts, MARGIN=1, mycounts.col.median, FUN="/")
## scaling ( subtracting the column means)
drawMA(A=MA.quant$A,
M=MA.quant$M,
title="Normalized Data (Quantiles)"
)
drawHist(M=MA.quant$M,
title="Normalized Data (Quantiles)")
# We need the DESeq library
if(!required(DESeq)){
library(DESeq)
}
# We need the marray library
if(!required(marray)){
biocLite()
}
source("http://bioconductor.org/biocLite.R")
# We need the DESeq library
if(!require(DESeq)){
library(DESeq)
}
# We need the marray library
if(!require(marray)){
biocLite()
}
mycounts.quant <- normalizeQuantiles(mycounts)
MA.quant <- computeMA(mycounts.quant)
mycounts.col.med <- apply(mycounts,2, median)
mycounts.N.mad <- sweep(mycounts, MARGIN=1, mycounts.col.med, FUN="-")
mycounts.col.mad <- apply(mycounts,2, mad)
mycounts.N.mad <- sweep(mycounts, MARGIN=1, mycounts.col.med, FUN="/")
mycounts.col.med <- apply(mycounts,2, median)
mycounts.N.mad <- sweep(mycounts, MARGIN=1, mycounts.col.med, FUN="-")
mycounts.col.mad <- apply(mycounts,2, mad)
mycounts.N.mad <- sweep(mycounts, MARGIN=1, mycounts.col.med, FUN="/")
# mycounts will refer to data in log scale.
# Note that a pseudo count is added to each count
# to avoid problems related to subsequent logarithmic transformation
mycounts <- log2(mycounts + 1)
## Quantile normalization
mycounts.quant <- normalizeQuantiles(mycounts)
MA.quant <- computeMA(mycounts.quant)
## Library size
mycounts.col.sum <- apply(mycounts,2, sum)
mycounts.N.ls <- sweep(mycounts, MARGIN=1, mycounts.col.sum, FUN="/")
mycounts.col.med <- apply(mycounts,2, median)
mycounts.n.med <- sweep(mycounts, MARGIN=1, mycounts.col.med, FUN="-")
mycounts.col.med
mycounts <- log2(mycounts + 1)
## Quantile normalization (Q)
mycounts.quant    <- normalizeQuantiles(mycounts)
MA.quant          <- computeMA(mycounts.quant)
## Library size (LS)
mycounts.col.sum <- apply(mycounts,2, sum)
mycounts.n.ls    <- sweep(mycounts, MARGIN=1, mycounts.col.sum, FUN="/")
## Mediane centering (MED):
mycounts.col.med <- apply(mycounts,2, median)
mycounts.n.med   <- sweep(mycounts, MARGIN=2, mycounts.col.med, FUN="-")
## median centering and rescaling using mad (MAD)
mycounts.col.mad <- apply(mycounts.n.med,2, mad)
mycounts.n.mad   <- sweep(mycounts.n.med, MARGIN=2, mycounts.col.mad, FUN="/")
colnames(m)
colnames(mycounts)
colnames(mycounts)
colnames(mycounts)
"iver" %in% colnames(mycounts)
?match
charmatch(colnames(mycounts), "idn")
pmatch(colnames(mycounts), "idn")
?pmatch(colnames(mycounts), "idn")
?pmatch("idn", colnames(mycounts))
pmatch("idn", colnames(mycounts))
substr(colnames(mycounts), 4)
substr(colnames(mycounts), 4, 20)
substr(colnames(mycounts), 5, 20)
as.numeric(substr(colnames(mycounts), 5, 20))
substr(colnames(mycounts), 5, 20)
numeric(substr(colnames(mycounts), 5, 20))
substr(colnames(mycounts), 5, 20)
